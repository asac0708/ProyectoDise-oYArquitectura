# -*- coding: utf-8 -*-
import os
from dotenv import load_dotenv
from pymongo import MongoClient
from bson.binary import Binary
from datetime import datetime
import numpy as np
import pandas as pd

from itertools import product
from fpdf import FPDF
from IPython.display import FileLink

from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler, PolynomialFeatures, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.model_selection import cross_val_score, KFold
from sklearn.metrics import (
    mean_absolute_error,
    mean_squared_error,
    make_scorer,
    silhouette_score,
    silhouette_samples,
)
from sklearn.utils import resample
from utils.conexion_mongo import db
from io import BytesIO

def reporte_en_pdf(ventas):
    # Leer colecciones
    venta_df = pd.DataFrame(ventas)
    arriendo_df = pd.DataFrame(list(db["arriendo"].find()))

    # Quitar columna _id si no es necesaria
    venta_df.drop(columns="_id", inplace=True, errors="ignore")
    arriendo_df.drop(columns="_id", inplace=True, errors="ignore")


    def eliminar_columnas_inutiles(df,columnas_a_eliminar):

        df = df.drop(columns=columnas_a_eliminar, errors='ignore')
        print(f"‚úÖ Columnas eliminadas: {columnas_a_eliminar}")
        return df

    def procesar_ubicacion_y_ciudad(df):
        # Diccionarios de agrupaci√≥n
        regiones = {
            'Sabana de Bogot√°': {'Ch√≠a', 'Chia', 'Madrid', 'Cajic√°', 'Cajica', 'Sopo', 'Sop√≥', 'Mosquera', 'Cota', 'Subachoque', 'La calera', 'La Calera', 'Cundinamarca', 'Tocancip√°', 'Zipaquir√°'},
            '√Årea Metropolitana Medell√≠n': {'Itag√º√≠', 'Itagui', 'Itagu√≠', 'Bello', 'Rionegro', 'Antioquia'},
            'Eje Cafetero': {'Pereira', 'Dosquebradas', 'Santa Rosa de Cabal', 'Armenia', 'Calarc√°', 'Villamaria', 'Quindio', 'Manizales'},
            'Norte de Santander': {'C√∫cuta', 'Los patios', 'Villa del rosario'},
            '√Årea Metropolitana Bucaramanga': {'Bucaramanga', 'Floridablanca'},
            '√Årea Metropolitana Barranquilla': {'Barranquilla', 'Puerto Colombia', 'Atl√°ntico'},
            'Cali': {'Jamund√≠', 'Palmira'}
        }

        def agrupar_ciudad(x):
            for nombre, grupo in regiones.items():
                if x in grupo:
                    return nombre
            return x

        df['Ciudad'] = df['Ciudad'].apply(agrupar_ciudad)

        conteo_ciudades = df['Ciudad'].value_counts()
        ciudades_comunes = conteo_ciudades[conteo_ciudades > 20].index
        df['Ciudad'] = df['Ciudad'].apply(lambda x: x if x in ciudades_comunes else 'Otro')

        print(f"üèôÔ∏è Columna 'Ciudad' agrupada. Total de ciudades finales: {df['Ciudad'].nunique()}")
        return df

    def limpiar_variables_numericas(df):
        # √Årea Construida
        df['√Årea Construida'] = (
            df['√Årea Construida']
            .astype(str)
            .str.split('.').str[0]
            .str.replace(',', '', regex=False)
            .str.strip()
        )
        df['√Årea Construida'] = pd.to_numeric(df['√Årea Construida'], errors='coerce')

        # Precio
        df['Precio'] = (
            df['Precio']
            .astype(str)
            .str.replace('$', '', regex=False)
            .str.replace('.', '', regex=False)
            .str.replace(',', '', regex=False)
            .str.strip()
        )
        df['Precio'] = pd.to_numeric(df['Precio'], errors='coerce')
        print("üí∞ Columna 'Precio' limpiada y convertida a num√©rico.")

        # Antig√ºedad
        mapa_antiguedad = {
            'menor a 1 a√±o': 1, '1 a 8 a√±os': 4, '9 a 15 a√±os': 9,
            '16 a 30 a√±os': 16, 'm√°s de 30 a√±os': 30, 'N/A': 9
        }
        df['Antiguedad_num'] = df['Antig√ºedad'].map(mapa_antiguedad)
        print("‚è≥ 'Antig√ºedad' convertida a 'Antiguedad_num'.")

        df.drop(columns=['Antig√ºedad'], inplace=True, errors='ignore')
        return df

    def convertir_columnas_a_numerico(df):
        for col in ['Ba√±os', 'Habitaciones', 'Estrato']:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace(',', '', regex=False)
                .str.strip()
            )
            df[col] = pd.to_numeric(df[col], errors='coerce')

        df[['Ba√±os', 'Habitaciones']] = df[['Ba√±os', 'Habitaciones']].fillna(0)
        estrato_mean = df['Estrato'].mean()
        df['Estrato'] = df['Estrato'].fillna(estrato_mean)
        print("üßπ 'Ba√±os', 'Habitaciones' y 'Estrato' convertidos y NaN imputados.")
        return df

    def crear_dummies(df):
        columnas_dummies = ['Tipo de Inmueble', 'Ciudad']
        dummies = pd.get_dummies(df[columnas_dummies], drop_first=True)
        df = pd.concat([df.drop(columns=columnas_dummies), dummies], axis=1)

        df = df.astype({col: 'int' for col in df.select_dtypes(include='bool').columns})
        print(f"üèóÔ∏è Dummies creados para: {columnas_dummies}")
        return df


    '''def agregar_variables_contexto_ubicacion(df):
        """
        Agrega columnas que capturan informaci√≥n contextual de ubicaci√≥n:
        - Precio_m2_ubicacion: promedio del precio por m¬≤ en cada ubicaci√≥n
        - Precio_ubicacion: promedio del precio total en cada ubicaci√≥n

        Requiere columnas: 'Precio', '√Årea Construida', 'Ubicaci√≥n'
        """
        df = df.copy()

        # Calcular precio por m¬≤ con protecci√≥n por divisi√≥n por cero
        df['Precio_m2'] = df['Precio'] / (df['√Årea Construida'] + 1)

        # Agregar promedios por ubicaci√≥n
        df['Precio_m2_ubicacion'] = df.groupby('Ubicaci√≥n')['Precio_m2'].transform('mean')
        df['Precio_ubicacion'] = df.groupby('Ubicaci√≥n')['Precio'].transform('mean')

        print("üìç Columnas 'Precio_m2_ubicacion' y 'Precio_ubicacion' creadas.")
        return df'''


    def agregar_variables_contexto_ubicacion(df):
        """
        Agrega columnas que capturan informaci√≥n contextual de ubicaci√≥n:
        - Precio_m2_ubicacion: promedio del precio por m¬≤ en cada ubicaci√≥n (leave-one-out)
        - Precio_ubicacion: promedio del precio total en cada ubicaci√≥n (leave-one-out)

        Elimina ubicaciones con solo un registro (no se puede calcular LOO).
        Requiere columnas: 'Precio', '√Årea Construida', 'Ubicaci√≥n'
        """
        df = df.copy()

        # Calcular Precio por m¬≤ con protecci√≥n por divisi√≥n por cero
        df['Precio_m2'] = df['Precio'] / (df['√Årea Construida'] + 1)

        # Contar cu√°ntos datos tiene cada ubicaci√≥n
        conteo_ubicaciones = df['Barrio'].value_counts()

        # Filtrar ubicaciones con m√°s de 1 dato
        ubicaciones_validas = conteo_ubicaciones[conteo_ubicaciones > 1].index
        df = df[df['Barrio'].isin(ubicaciones_validas)].copy()

        # Leave-One-Out promedio
        def leave_one_out_mean(series):
            #return (series.sum() - series) / (series.count() - 1)
            return (series.sum()) / (series.count())
        df['Precio_ubicacion'] = df.groupby('Barrio')['Precio'].transform(leave_one_out_mean)
        df['Precio_m2_ubicacion'] = df.groupby('Barrio')['Precio_m2'].transform(leave_one_out_mean)

        print(f"üìç Columnas 'Precio_ubicacion' y 'Precio_m2_ubicacion' creadas con leave-one-out.")
        print(f"‚úÖ Ubicaciones eliminadas por falta de datos: {conteo_ubicaciones[conteo_ubicaciones == 1].shape[0]}")

        return df
    def remover_outliers_area_precio(df, col_area='√Årea Construida', col_precio='Precio', area_max=None, precio_max=None):
        """
        Elimina filas con valores extremos en √°rea y precio.

        Par√°metros:
        - df: DataFrame original
        - col_area: nombre de la columna de √°rea construida
        - col_precio: nombre de la columna de precio
        - area_max: umbral m√°ximo de √°rea (si None, se usa el percentil 99)
        - precio_max: umbral m√°ximo de precio (si None, se usa el percentil 99)

        Retorna:
        - DataFrame limpio
        """
        df = df.copy()

        # Determinar umbrales autom√°ticos si no se especifican
        if area_max is None:
            area_max = df[col_area].quantile(0.95)
        if precio_max is None:
            precio_max = df[col_precio].quantile(0.95)

        original_len = len(df)
        df = df[(df[col_area] <= area_max) & (df[col_precio] <= precio_max)]
        final_len = len(df)

        print(f"üßπ Se eliminaron {original_len - final_len} outliers. √Årea ‚â§ {area_max:.2f}, Precio ‚â§ {precio_max:,.0f}")

        return df
    def preprocesor_arriendo(df):
        """
        Funci√≥n principal de preprocesamiento para datos de arriendo.
        Ejecuta los siguientes pasos:
        - Elimina columnas irrelevantes
        - Extrae y agrupa ciudad
        - Limpia y convierte variables num√©ricas
        - Imputa valores faltantes
        - Crea variables dummies
        - Escala variables num√©ricas
        Retorna:
        - df: DataFrame completo preprocesado
        - X: variables predictoras escaladas
        - y: variable objetivo (Precio)
        - X_sin_estandarizar: variables predictoras sin escalar
        """
        df = df.copy()
        columnas_a_eliminar = ['Enlace', 'Administraci√≥n', 'Estado', '√Årea Privada','Tipo de Inmueble','Tipo']
        df = eliminar_columnas_inutiles(df,columnas_a_eliminar)
        print(df.info)
        df = procesar_ubicacion_y_ciudad(df)
        df = limpiar_variables_numericas(df)
        print(df.info)
        df = convertir_columnas_a_numerico(df)

        print(df.info)
        #df = crear_dummies(df)
        df = agregar_variables_contexto_ubicacion(df)
        # Crear subconjunto sin estandarizar
        X_sin_estandarizar = df.drop(columns=['Precio'])

        # Separar variable objetivo
        y = df['Precio']
        X = df.drop(columns=['Precio'])
        df = remover_outliers_area_precio(df)
        # Variables num√©ricas a escalar
        columnas_a_estandarizar = ['Ba√±os', '√Årea Construida', 'Habitaciones', 'Antiguedad_num', 'Estrato']


        print(f"üéØ Preprocesamiento completado. X shape: {X.shape}, y shape: {y.shape}")
        return df, X, y, X_sin_estandarizar
    def limpiar_administracion(df):
        """
        Limpia la columna 'Administraci√≥n' dejando solo el n√∫mero:
        - Convierte 'N/A' en 0
        - Extrae n√∫meros y elimina puntos o s√≠mbolos
        - Convierte el resultado a tipo num√©rico
        """
        df = df.copy()
        df['Administraci√≥n'] = df['Administraci√≥n'].astype(str)

        df['Administraci√≥n'] = (
            df['Administraci√≥n']
            .str.replace('.', '', regex=False)
            .str.extract(r'(\d+)')[0]  # Extrae solo los n√∫meros iniciales
            .fillna('0')               # Llena con 0 si no se encuentra n√∫mero
            .astype(int)               # Convierte a entero
        )

        print("üè¢ Columna 'Administraci√≥n' limpiada.")
        return df

    def preprocesor_venta(df,arriendo_data_ubicacion,kmeans):
        columnas_a_eliminar = ['Estado', '√Årea Privada','Tipo de Inmueble','Tipo']
        df = eliminar_columnas_inutiles(df,columnas_a_eliminar)
        df = limpiar_variables_numericas(df)
        df = convertir_columnas_a_numerico(df)
        df = limpiar_administracion(df)
        df = df.merge(arriendo_data_ubicacion, on='Barrio', how='left')
        # 1. Variables usadas en el clustering
        features_cluster = ['Estrato', 'Ba√±os', '√Årea Construida', 'Habitaciones', 'Antiguedad_num',
                            'Precio_ubicacion', 'Precio_m2_ubicacion']

        # 2. Preprocesar las nuevas propiedades
        X_nuevas = df[features_cluster].dropna()  # Filtrar si hay NaNs
        X_nuevas_scaled = X_nuevas.copy()

        # 3. Aplicar el mismo escalado que se us√≥ en clustering original

        # 4. Asignar cl√∫ster usando el modelo ya entrenado
        df.loc[X_nuevas.index, 'Cluster'] = kmeans.predict(X_nuevas_scaled)

        return df
    def calcular_roi_anual(ventas_df):
        """
        Calcula el porcentaje de retorno de inversi√≥n anual:
        ROI_anual_% = [(12 * (prediccion_precio - Administraci√≥n)) / Precio] * 100
        Asume que 'prediccion_precio', 'Administraci√≥n' y 'Precio' est√°n en pesos colombianos.
        """
        df = ventas_df.copy()
        df['ROI_anual_%'] = (
            12 * (df['Prediccion_Precio'] - df['Administraci√≥n']) / df['Precio']
        ) * 100

        print("üìà Columna 'ROI_anual_%' creada.")
        return df

    arriendo_df, X_arriendo, y_arriendo, X_arriendo_sin_estandarizar = preprocesor_arriendo(arriendo_df)

    # Seleccionar las columnas num√©ricas relevantes
    columnas_numericas = [
        'Estrato', 'Ba√±os', '√Årea Construida', 'Habitaciones',
        'Antiguedad_num', 'Precio_ubicacion', 'Precio_m2_ubicacion'
    ]

    # Eliminar filas con valores faltantes
    df_cluster = arriendo_df[columnas_numericas].dropna()

    # Escalar los datos
    X_scaled = df_cluster.copy()



    # Aplicar KMeans con 3 cl√∫steres
    kmeans = KMeans(n_clusters=3, random_state=42)
    cluster_labels = kmeans.fit_predict(X_scaled)

    # Agregar etiquetas de cl√∫ster al DataFrame original
    arriendo_df['Cluster'] = cluster_labels



    # Definir las variables predictoras num√©ricas
    features = ['Estrato', 'Ba√±os', '√Årea Construida', 'Habitaciones', 'Antiguedad_num','Precio_ubicacion','Precio_m2_ubicacion']

    # Almacenar resultados por cl√∫ster
    resultados = []

    # Iterar por cada cl√∫ster
    for cluster_id in sorted(arriendo_df['Cluster'].unique()):
        df_cluster = arriendo_df[arriendo_df['Cluster'] == cluster_id]

        X = df_cluster[features]
        y = df_cluster['Precio']

        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X, y)
        y_pred = model.predict(X)

        mae = mean_absolute_error(y, y_pred)
        rmse = np.sqrt(mean_squared_error(y, y_pred))
        relative_error = np.mean(np.abs(y - y_pred) / y)
        porcentaje_buenas = 100 * np.mean(np.abs(y - y_pred) < 500000)

        resultados.append({
            'Cluster': cluster_id,
            'MAE': mae,
            'RMSE': rmse,
            'Error Relativo Promedio': relative_error,
            '% Error < $500,000': porcentaje_buenas,
            'N': len(df_cluster)
        })

    resultados_df = pd.DataFrame(resultados)

    # Crear el nuevo DataFrame con las columnas solicitadas
    arriendo_data_ubicacion = arriendo_df[['Barrio', 'Precio_ubicacion', 'Precio_m2_ubicacion']].copy()

    # Mostrar una vista previa
    arriendo_data_ubicacion.head()
    venta_df = preprocesor_venta(venta_df,arriendo_data_ubicacion,kmeans)
    venta = venta_df[features]
    venta_df['Prediccion_Precio'] = model.predict(venta_df[features])
    venta_df = calcular_roi_anual(venta_df)


    # Convertir la columna a num√©rica primero para poder filtrar correctamente

    # Filtrar las propiedades con ROI anual mayor o igual al 15%
    venta_df = venta_df[venta_df['ROI_anual_%'] <= 10]

    # Aseg√∫rate de que esta columna exista y est√© en formato num√©rico
    venta_df['ROI_anual_%'] = pd.to_numeric(venta_df['ROI_anual_%'], errors='coerce')
    venta_df = venta_df.drop_duplicates(subset=['Enlace'])

    # Seleccionar top 20
    top_20 = venta_df.sort_values(by='ROI_anual_%', ascending=False).head(20)

    # Crear PDF
    class PDF(FPDF):
        def header(self):
            self.set_font('Arial', 'B', 12)
            self.cell(0, 10, 'TOP 20 PROPIEDADES POR ROI ANUAL', ln=True, align='C')
            self.ln(5)

        def property_table(self, df):
            self.set_font("Arial", size=8)
            for i, row in df.iterrows():
                self.multi_cell(0, 6, f" Propiedad #{i+1}", 0, 1)
                for col, val in row.items():
                    self.multi_cell(0, 6, f"{col}: {val}", 0, 1)
                self.ln(4)

    # Generar y guardar PDF
    pdf = PDF()
    pdf.set_auto_page_break(auto=True, margin=10)
    pdf.add_page()
    pdf.property_table(top_20)
    pdf_bytes = pdf.output(dest='S').encode('latin1')  # FPDF devuelve str ‚Üí convertir a bytes
    pdf_buffer = BytesIO(pdf_bytes)
    pdf_buffer.seek(0)

    # Leer como binario para MongoDB
    contenido_pdf = Binary(pdf_buffer.read())

    return contenido_pdf